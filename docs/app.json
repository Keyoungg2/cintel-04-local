[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\nimport palmerpenguins  # This package provides the Palmer Penguins dataset\nimport pandas as pd\nimport seaborn as sns\nfrom shiny import reactive, render, req\n\n# Loading Palmer Penguins dataset\npenguins= palmerpenguins.load_penguins()\n\n# Naming page\nui.page_opts(title=\"K.Young Penguin Visualization\", fillable=True)\n\n# Add a Shiny UI sidebar\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Sidebar\")\n\n# Create a dropdown input to choose a column with ui.input_selectize()\n    ui.input_selectize(\"selected_attribute\",\"Select Attribute\",[\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"])\n\n# Add numeric input for the number of Plotly histogram bins\n    ui.input_numeric(\"plotly_bin_count\", \"Number of Plotly Histogram Bins\", value=20)\n\n# Add slider input for the number of Seaborn bin\n    ui.input_slider(\"seaborn_bin_count\", \"Number of Seaborn Bins\", 1, 20, 5)\n\n# Add checkbox group input to filter the species\n    ui.input_checkbox_group(\n    \"selected_species_list\",\n    \"Select Species\",\n    [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n    selected=[\"Adelie\"],\n    inline=True)\n\n# Adding a horizontal rule to the sidebar\n    ui.hr()\n\n# Using ui.a() to add a hyperlink to the sidebar\n    ui.a(\"K.Young GitHub\", href=\"https://github.com/Keyoungg2/cintel-02-data/tree/main\", target=\"_blank\")\n\n# Plot Charts for pegiuns data for body mass by island \nwith ui.layout_columns():\n\n    @render_plotly\n    def plot_plt():\n        return px.histogram(\n            filtered_data(),\n            x=\"body_mass_g\",\n            title=\"Penguin Mass Plotly    vs  Seaborn Species Count\",\n            labels={\"body_mass_g\": \"Body Mass (g)\", \"count\": \"Count\"})\n\n#Plot Charts for pegiuns data for body mass by species  \n    @render.plot\n    def plot_sns():\n            return sns.histplot(filtered_data(), x=\"species\", kde=False)\n\n#Creating ui navigation panel of  plots to difference in plotly vs Seaborn \nwith ui.navset_card_tab(id=\"tab\"):\n    with ui.nav_panel(\"Seaborn Histogram\"):\n\n        @render.plot\n        def seaborn_histogram():\n            seaborn_hist = sns.histplot(filtered_data(),x=input.selected_attribute(),bins=input.seaborn_bin_count(),)\n            seaborn_hist.set_title(\"Seaborn Penguin Data\")\n            seaborn_hist.set_xlabel(\"Selected Attribute\")\n            seaborn_hist.set_ylabel(\"Count\")\n\n    # Creating Scatter plot\n    with ui.nav_panel(\"Plotly scatterplot\"):\n        ui.card_header(\"Species Scatterplot\")\n\n        @render_plotly\n        def plotly_scatterplot():\n        # Scatterplot for flipper and bill lengeth correlation \n            return px.scatter(\n                filtered_data(),\n                x=\"flipper_length_mm\",\n                y=\"bill_length_mm\",\n                color=\"species\",\n                facet_col=\"sex\",\n                title=\"Flipper and Bill Lengeth Correlation Scatterplot\",\n                labels={\n                \"flipper_length_mm\": \"Flipper Length (mm)\",\n                \"bill_length_mm\": \"Bill Length (mm)\",})\n\n\n    # Creating Plotly Pie Chart plot\n    with ui.nav_panel(\"Plotly Pie Chart\"):\n        ui.card_header(\"Body Mass Pie Chart\")\n    \n        @render_plotly\n        def plotly_pie():\n            pie_chart = px.pie(\n                filtered_data(),\n                values=\"body_mass_g\",\n                names=\"island\",\n                title=\"Body mass on Islands\",\n            )\n            return pie_chart\n# Show Data\nwith ui.layout_columns():\n    with ui.accordion(id=\"acc\", open=\"closed\"):\n        with ui.accordion_panel(\"Data Table\"):\n            @render.data_frame\n            def penguins_datatable():\n                return render.DataTable(penguins)\n         \n        with ui.accordion_panel(\"Data Grid\"):\n            @render.data_frame\n            def penguins_grid():\n                return render.DataGrid(penguins)\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n    @reactive.calc\n    def filtered_data():\n        return penguins[penguins[\"species\"].isin(input.selected_species_list())]\n", "type": "text"}]